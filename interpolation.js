// Generated by LiveScript 1.2.0
(function(){
  var width, height, canvas, svg, minLatitude, maxLatitude, minLongitude, maxLongitude, dy, dx;
  width = 600;
  height = 800;
  canvas = d3.select('body').append('canvas').attr('width', width).attr('height', height).style('position', 'absolute').style('top', '0px').style('left', '0px')[0][0].getContext('2d');
  svg = d3.select('body').append('svg').attr('width', width).attr('height', height).style('position', 'absolute').style('top', '0px').style('left', '0px');
  minLatitude = 21.5;
  maxLatitude = 25.5;
  minLongitude = 119.5;
  maxLongitude = 122.5;
  dy = (maxLatitude - minLatitude) / height;
  dx = (maxLongitude - minLongitude) / width;
  d3.json("twCounty2010.topo.json", function(countiestopo){
    var counties, proj, path, g;
    counties = topojson.feature(countiestopo, countiestopo.objects['twCounty2010.geo']);
    proj = function(arg$){
      var x, y;
      x = arg$[0], y = arg$[1];
      return [(x - minLongitude) / dx, height - (y - minLatitude) / dy];
    };
    path = d3.geo.path().projection(proj);
    g = svg.append('g').attr('id', 'taiwan').attr('class', 'counties');
    g.selectAll('path').data(counties.features).enter().append('path').attr('class', function(){
      return 'q-9-9';
    }).attr('d', path);
    return d3.json("stations.json", function(stations){
      var root, current, rainData, samples, distance, idwInterpolate, colorOf, yPixel, plotInterpolatedData, updateSevenSegment;
      svg.selectAll('circle').data(stations).enter().append('circle').style('stroke', 'black').style('fill', 'none').attr('r', 2).attr("transform", function(it){
        return "translate(" + proj([+it.longitude, +it.latitude]) + ")";
      });
      root = new Firebase("https://cwbtw.firebaseio.com");
      current = root.child("rainfall/current");
      rainData = {};
      samples = {};
      distance = function(arg$, arg1$){
        var x1, y1, x2, y2;
        x1 = arg$[0], y1 = arg$[1];
        x2 = arg1$[0], y2 = arg1$[1];
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
      };
      idwInterpolate = function(samples, power, point){
        var sum, sumWeight, i$, len$, s, d, weight;
        sum = 0.0;
        sumWeight = 0.0;
        for (i$ = 0, len$ = samples.length; i$ < len$; ++i$) {
          s = samples[i$];
          d = distance(s, point);
          if (d === 0.0) {
            return s[2];
          }
          weight = Math.pow(d, -power);
          sum = sum + weight;
          sumWeight = sumWeight + weight * s[2];
        }
        return sumWeight / sum;
      };
      colorOf = function(z){
        var scale, color, i$, to$, i, nz, ref$;
        scale = [0, 30, 60, 100, 150, 210, 280, 400, 600, 1000];
        color = [d3.hsl(240, 1.0, 0.5), d3.hsl(240, 0.4, 0.6), d3.hsl(190, 0.4, 0.6), d3.hsl(130, 0.4, 0.6), d3.hsl(60, 0.4, 0.6), d3.hsl(30, 0.4, 0.6), d3.hsl(0, 0.4, 0.6), d3.hsl(-80, 0.4, 0.6), d3.hsl(-80, 1.0, 0.5), d3.hsl(-80, 1.0, 0.0)];
        for (i$ = 0, to$ = scale.length - 2; i$ <= to$; ++i$) {
          i = i$;
          if (scale[i] <= z && (z < scale[i + 1] || i === scale.length - 1)) {
            nz = z < (ref$ = scale[i + 1]) ? z : ref$;
            return d3.interpolateHsl(color[i], color[i + 1])((nz - scale[i]) / (scale[i + 1] - scale[i])).toString();
          }
        }
      };
      yPixel = 0;
      plotInterpolatedData = function(){
        var renderLine;
        yPixel = height;
        renderLine = function(){
          var i$, to$, xPixel, y, x, z, ref$;
          if (yPixel >= 0) {
            for (i$ = 0, to$ = width; i$ <= to$; i$ += 2) {
              xPixel = i$;
              y = minLatitude + dy * yPixel;
              x = minLongitude + dx * xPixel;
              z = 0 > (ref$ = idwInterpolate(samples, 2.75, [x, y])) ? 0 : ref$;
              canvas.fillStyle = colorOf(z);
              canvas.fillRect(xPixel, height - yPixel, 2, 2);
            }
            yPixel = yPixel - 2;
            return setTimeout(renderLine, 0);
          }
        };
        return renderLine();
      };
      updateSevenSegment = function(valueString){
        var pins, sevenSegmentCharMap;
        pins = "abcdefg";
        sevenSegmentCharMap = {
          ' ': 0x00,
          '-': 0x40,
          '0': 0x3F,
          '1': 0x06,
          '2': 0x5B,
          '3': 0x4F,
          '4': 0x66,
          '5': 0x6D,
          '6': 0x7D,
          '7': 0x07,
          '8': 0x7F,
          '9': 0x6F
        };
        return d3.selectAll('.seven-segment').data(valueString).each(function(d, i){
          var bite, i$, to$, bit, results$ = [];
          bite = sevenSegmentCharMap[d];
          for (i$ = 0, to$ = pins.length - 1; i$ <= to$; ++i$) {
            i = i$;
            bit = Math.pow(2, i);
            results$.push(d3.select(this).select("." + pins[i]).classed('on', (bit & bite) === bit));
          }
          return results$;
        });
      };
      return current.on('value', function(it){
        var res$, i$, ref$, len$, st;
        rainData = it.val().data;
        d3.select('#rainfall-timestamp').text("DATE: " + it.val().date + " " + it.val().time + " ");
        d3.select('#station-name').text("已更新");
        updateSevenSegment("    ");
        res$ = [];
        for (i$ = 0, len$ = (ref$ = stations).length; i$ < len$; ++i$) {
          st = ref$[i$];
          if (rainData[st.name] != null && !isNaN(rainData[st.name]['today'])) {
            res$.push([+st.longitude, +st.latitude, parseFloat(rainData[st.name]['today'])]);
          }
        }
        samples = res$;
        svg.selectAll('circle').data(stations).style('fill', function(st){
          if (rainData[st.name] != null && !isNaN(rainData[st.name]['today'])) {
            return colorOf(parseFloat(rainData[st.name]['today']));
          } else {
            return '#FFFFFF';
          }
        }).on('mouseover', function(d, i){
          var rawValue, ref$;
          d3.select('#station-name').text(d.name);
          if (rainData[d.name] != null && !isNaN(rainData[d.name]['today'])) {
            rawValue = parseInt(rainData[d.name]['today']) + "";
            return updateSevenSegment(repeatString$(" ", 0 > (ref$ = 4 - rawValue.length) ? 0 : ref$) + rawValue);
          } else {
            return updateSevenSegment("----");
          }
        });
        return plotInterpolatedData();
      });
    });
  });
  function repeatString$(str, n){
    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
    return r;
  }
}).call(this);
